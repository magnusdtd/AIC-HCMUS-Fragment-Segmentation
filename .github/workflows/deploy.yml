name: Build and Deploy to GKE

on:
  push:
    branches:
      - deploy  

env:
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
  REGION: ${{ secrets.REGION }}

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout source code
    - name: Checkout source
      uses: actions/checkout@v3

    # Step 2: Set up Node.js
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '24.0.2'

    # Step 3: Install OpenSSL and create TLS files
    - name: Install OpenSSL and create TLS files
      run: |
        sudo apt update && sudo apt install -y openssl
        mkdir -p nginx-ssl
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
          -keyout nginx-ssl/tls.key -out nginx-ssl/tls.crt \
          -subj "/CN=aic-hcmus-noobers.duckdns.org"

    # Step 4: Replace placeholders in YAML files
    - name: Replace placeholders in YAML files
      env:
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        MINIO_USER: ${{ secrets.MINIO_USER }}
        MINIO_PASSWORD: ${{ secrets.MINIO_PASSWORD }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
      run: |
        sed -i "s/{{MINIO_USER}}/$MINIO_USER/g" k8s/app.yaml
        sed -i "s/{{MINIO_PASSWORD}}/$MINIO_PASSWORD/g" k8s/app.yaml
        sed -i "s/{{DB_USER}}/$DB_USER/g" k8s/app.yaml
        sed -i "s/{{DB_PASSWORD}}/$DB_PASSWORD/g" k8s/app.yaml
        sed -i "s/{{SECRET_KEY}}/$SECRET_KEY/g" k8s/app.yaml
        sed -i "s/{{GOOGLE_CLIENT_ID}}/${{ secrets.GOOGLE_CLIENT_ID }}/g" k8s/app.yaml
        sed -i "s/{{GOOGLE_CLIENT_SECRET}}/${{ secrets.GOOGLE_CLIENT_SECRET }}/g" k8s/app.yaml

        sed -i "s/{{DB_USER}}/$DB_USER/g" k8s/postgres.yaml
        sed -i "s/{{DB_PASSWORD}}/$DB_PASSWORD/g" k8s/postgres.yaml

        sed -i "s/{{MINIO_USER}}/$MINIO_USER/g" k8s/minio.yaml
        sed -i "s/{{MINIO_PASSWORD}}/$MINIO_PASSWORD/g" k8s/minio.yaml

        sed -i "s/{{DB_USER}}/$DB_USER/g" k8s/postgres-exporter.yaml
        sed -i "s/{{DB_PASSWORD}}/$DB_PASSWORD/g" k8s/postgres-exporter.yaml

    # Step 5: Authenticate to Google Cloud
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    # Step 6: Set up Google Cloud SDK
    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.PROJECT_ID }}

    # Step 7: Configure Docker for Google Container Registry (GCR)
    - name: Configure Docker for GCR
      run: gcloud auth configure-docker

    # Step 8: Build and Push Docker images
    - name: Build and Push Docker images
      run: |
        docker build -t gcr.io/${{ secrets.PROJECT_ID }}/app:latest .
        docker push gcr.io/${{ secrets.PROJECT_ID }}/app:latest
        docker build -t gcr.io/${{ secrets.PROJECT_ID }}/celery:latest -f backend/app/predict/Dockerfile .
        docker push gcr.io/${{ secrets.PROJECT_ID }}/celery:latest

    # Step 10: Get GKE Cluster Credentials
    - name: Get GKE Cluster Credentials
      run: |
        gcloud container clusters get-credentials ${{ env.CLUSTER_NAME }} \
          --region ${{ env.REGION }} \
          --project ${{ secrets.PROJECT_ID }}
        
    # Step 11: Install gke-gcloud-auth-plugin
    - name: Install gke-gcloud-auth-plugin
      run: |
        gcloud components install gke-gcloud-auth-plugin

    # Step 12: Create TLS Secret
    - name: Create TLS Secret
      run: |
        kubectl apply -f k8s/namespace.yaml
        kubectl delete secret nginx-ssl --namespace=aic-hcmus-app --ignore-not-found
        kubectl create secret tls nginx-ssl \
          --cert=nginx-ssl/tls.crt \
          --key=nginx-ssl/tls.key \
          --namespace=aic-hcmus-app

    # Step 13: Create Grafana ConfigMaps
    - name: Create Grafana ConfigMaps
      run: |
        kubectl apply -f k8s/namespace.yaml

        kubectl delete configmap grafana-dashboards -n aic-hcmus-monitor --ignore-not-found
        kubectl create configmap grafana-dashboards \
          --from-file=grafana/dashboards \
          -n aic-hcmus-monitor

        kubectl delete configmap grafana-provisioning-alerting -n aic-hcmus-monitor --ignore-not-found
        kubectl create configmap grafana-provisioning-alerting \
          --from-file=grafana/provisioning/alerting \
          -n aic-hcmus-monitor

        kubectl delete configmap grafana-provisioning-datasources -n aic-hcmus-monitor --ignore-not-found
        kubectl create configmap grafana-provisioning-datasources \
          --from-file=grafana/provisioning/datasources \
          -n aic-hcmus-monitor

        kubectl delete configmap grafana-provisioning-dashboards -n aic-hcmus-monitor --ignore-not-found
        kubectl create configmap grafana-provisioning-dashboards \
          --from-file=grafana/provisioning/dashboards \
          -n aic-hcmus-monitor

    # Step 14: Deploy to GKE
    - name: Deploy to GKE
      run: |
        kubectl apply -f k8s/minio.yaml
        kubectl apply -f k8s/postgres.yaml
        kubectl apply -f k8s/redis.yaml
        sleep 15
        kubectl apply -f k8s/app.yaml
        kubectl apply -f k8s/celery.yaml
        kubectl apply -f k8s/nginx.yaml
        
        kubectl apply -f k8s/celery-exporter.yaml
        kubectl apply -f k8s/node-exporter.yaml
        kubectl apply -f k8s/postgres-exporter.yaml
        kubectl apply -f k8s/redis-exporter.yaml
        kubectl apply -f k8s/prometheus.yaml
        kubectl apply -f k8s/grafana.yaml
